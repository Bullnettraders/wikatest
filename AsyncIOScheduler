# bot_apscheduler.py
import json
import os
from datetime import datetime, timedelta
import asyncio
import discord
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import requests
from bs4 import BeautifulSoup

# ----------------- Konfiguration -----------------
TOKEN = "DEIN_DISCORD_BOT_TOKEN"
CHANNEL_EVENTS = 123456789012345678  # hier deine Channel-ID
POSTED_EVENTS_FILE = "posted_events.json"
# --------------------------------------------------

if not os.path.exists(POSTED_EVENTS_FILE):
    with open(POSTED_EVENTS_FILE, "w") as f:
        json.dump([], f)

def load_posted():
    with open(POSTED_EVENTS_FILE, "r") as f:
        return set(tuple(x) for x in json.load(f))

def save_posted(posted_events):
    with open(POSTED_EVENTS_FILE, "w") as f:
        json.dump(list(posted_events), f)

posted_events = load_posted()
def add_posted_event(ident):
    posted_events.add(ident)
    save_posted(posted_events)

def get_investing_calendar(for_tomorrow=False):
    target_date = datetime.today() + timedelta(days=1 if for_tomorrow else 0)
    url = f"https://www.investing.com/economic-calendar/{target_date.strftime('%Y-%m-%d')}"
    headers = {"User-Agent":"Mozilla/5.0","Accept-Language":"de-DE,en;q=0.9"}
    resp = requests.get(url, headers=headers)
    soup = BeautifulSoup(resp.text, "lxml")
    table = soup.find("table", id="economicCalendarData")
    if not table:
        return []
    evs = []
    for row in table.select("tr.js-event-item"):
        time     = row.select_one("td[data-test='event-time']").get_text(strip=True)
        country  = row.select_one("td[data-test='event-country']").get_text(strip=True).lower()
        title    = row.select_one("td[data-test='event-name']").get_text(strip=True)
        imp      = len(row.select(".grayFullBullishIcon"))
        if imp < 2: continue
        prev  = row.select_one("td[data-test='event-previous']").get_text(strip=True) or ""
        fcst  = row.select_one("td[data-test='event-forecast']").get_text(strip=True) or ""
        actual= row.select_one("td[data-test='event-actual']").get_text(strip=True) or ""
        evs.append({"date":target_date.strftime("%d.%m.%Y"),
                    "time":time,"country":country,
                    "title":title,"importance":imp,
                    "previous":prev,"forecast":fcst,"actual":actual})
    return evs

async def post_today_events(bot):
    events = get_investing_calendar()
    events.sort(key=lambda e: e['time'])
    if not events: return
    embed = discord.Embed(title=f"üìÖ Wirtschaftstermine ({events[0]['date']})", color=discord.Color.blue())
    flags = {'germany':'üá©üá™','united states':'üá∫üá∏'}
    for ev in events:
        ident = (ev['title'],ev['date'],ev['country'])
        if ident not in posted_events:
            emoji = flags.get(ev['country'],'üåç')
            stars = "‚≠ê"*ev['importance']
            warn  = " üö®" if ev['importance']==3 else ""
            name = f"{emoji} {ev['time']} ‚Äì {ev['title']} {stars}{warn}"
            val  = f"üîπ Prognose: {ev['forecast'] or '‚Äì'} | üî∏ Vorher: {ev['previous'] or '‚Äì'}"
            embed.add_field(name=name, value=val, inline=False)
            add_posted_event(ident)
    ch = bot.get_channel(CHANNEL_EVENTS)
    await ch.send(embed=embed)

async def check_for_actual_updates(bot):
    events = get_investing_calendar()
    flags = {'germany':'üá©üá™','united states':'üá∫üá∏'}
    NEG = ["inflation","arbeitslosen","vpi","verbraucherpreisindex"]
    POS = ["payroll","bip","besch√§ftigung","wachstum"]
    for ev in events:
        if not ev['actual']: continue
        ident = (ev['title'],ev['date'],ev['country'])
        if ident in posted_events: continue
        try:
            a = float(ev['actual'].replace("%","").replace("k",""))
            f = float(ev['forecast'].replace("%","").replace("k",""))
        except:
            label, color = "‚öñÔ∏è Neutral", discord.Color.orange()
        else:
            t = ev['title'].lower()
            if any(k in t for k in NEG):
                label, color = ("‚úÖ Positiv", discord.Color.green()) if a < f else ("‚ùå Negativ", discord.Color.red())
            elif any(k in t for k in POS):
                label, color = ("‚úÖ Positiv", discord.Color.green()) if a > f else ("‚ùå Negativ", discord.Color.red())
            else:
                label, color = "‚öñÔ∏è Neutral", discord.Color.orange()
        embed = discord.Embed(
            title=f"{label} Zahlen ver√∂ffentlicht: {ev['title']} ({flags.get(ev['country'],'üåç')})",
            color=color
        )
        embed.add_field(name="Ergebnis", value=ev['actual'], inline=True)
        embed.add_field(name="Prognose", value=ev['forecast'], inline=True)
        embed.add_field(name="Vorher", value=ev['previous'], inline=True)
        ch = bot.get_channel(CHANNEL_EVENTS)
        await ch.send(embed=embed)
        add_posted_event(ident)

# ----- Bot und Scheduler -----
intents = discord.Intents.default()
bot = discord.Client(intents=intents)

scheduler = AsyncIOScheduler()
# jeden 60s-Job
scheduler.add_job(post_today_events,    'interval', seconds=300, args=[bot], next_run_time=datetime.now())
scheduler.add_job(check_for_actual_updates, 'interval', seconds=60, args=[bot], next_run_time=datetime.now())
scheduler.start()

@bot.event
async def on_ready():
    print(f"‚úÖ Eingeloggt als {bot.user}")

bot.run(TOKEN)
